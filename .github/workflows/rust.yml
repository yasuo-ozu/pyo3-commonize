name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: cargo test --verbose

  cross-test:
    name: Test on ${{matrix.system.os}}-${{matrix.system.target}} ${{matrix.python-version}}
    runs-on: ${{matrix.system.os}}
    strategy:
      fail-fast: false
      matrix:
        system:
          - os: "ubuntu-latest"
            target: "x86_64-unknown-linux-gnu"
          - os: "macos-latest"
            target: "aarch64-apple-darwin"
          - os: "macos-13"
            target: "x86_64-apple-darwin"
          - os: "windows-latest"
            target: "x86_64-pc-windows-gnu"
          - os: "windows-latest"
            target: "x86_64-pc-windows-msvc"
        python-version: [ "3.9", "3.10", "3.11" ]
        toolchain: [ "stable" ]
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4
    - name: "Install toolchain"
      shell: bash
      run: |
        rustup install ${{ matrix.toolchain }}-${{ matrix.system.target }} --profile minimal
        rustup default ${{ matrix.toolchain }}-${{ matrix.system.target }}
        rustup target add ${{ matrix.system.target }}

    # - name: setup pyenv
    #   if: matrix.system.os != 'windows-latest'
    #   uses: "gabrielfalcao/pyenv-action@v18"
    #   with:
    #     default: ${{ matrix.python-version }}

    - uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: ${{matrix.python-version}}

    - shell: bash
      run: python -m pip install --upgrade pip

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - shell: bash
      run: |
        cd examples
        # if [[ ! "${{ matrix.system.os }}" = "windows-latest" ]]; then
        #   pyenv local ${{ matrix.python-version }}
        # fi
        # poetry env use ${{ matrix.python-version }}
        poetry env use '${{ steps.setup-python.outputs.python-path }}'
        poetry install --no-interaction --no-root -vvv
        source $VENV
        make test
